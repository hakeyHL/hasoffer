<?xml version="1.0" encoding="UTF-8"?>

<configuration>

    <substitutionProperty name="log.base" value="logs/spider-provider-logs"/>

    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-6level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="StdoutFile"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/stdout.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/stdout.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FetchRequestLoggerFileOut"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/fetch-request.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/fetch-request.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FetchTaskResultLoggerFileOut"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/fetch-task-result.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/fetch-task-result.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>


    <appender name="FetchFlowLoggerFileOut"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/fetch-flow.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/fetch-flow.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ErrorLoggerFileOut"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/error.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <appender name="InfoLoggerFileOut"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/info.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="fetchLoggerFileOut"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/fetch.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/fetch.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxHistory>10</MaxHistory>
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%date [%thread][%-8level%logger{80}] %msg%n</pattern>
        </encoder>
    </appender>


    <!-- logger -->

    <!-- code info log -->
    <logger name="hasoffer" level="DEBUG">
        <appender-ref ref="InfoLoggerFileOut"/>
        <appender-ref ref="ErrorLoggerFileOut"/>
    </logger>


    <logger name="sites" level="DEBUG">
        <appender-ref ref="fetchLoggerFileOut"/>
    </logger>

    <logger name="hasoffer.spider" level="DEBUG">
        <appender-ref ref="fetchLoggerFileOut"/>
    </logger>

    <logger name="hasoffer.dubbo" level="DEBUG">
        <appender-ref ref="fetchLoggerFileOut"/>
    </logger>

    <logger name="us.codecraft" level="DEBUG">
        <appender-ref ref="fetchLoggerFileOut"/>
    </logger>

    <root>
        <level value="DEBUG"/>
        <appender-ref ref="stdout"/>
        <appender-ref ref="StdoutFile"/>
    </root>
</configuration>