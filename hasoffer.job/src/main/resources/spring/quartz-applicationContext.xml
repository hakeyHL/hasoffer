<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
">

    <!-- 声明工厂 -->
    <bean id="qrtz_scheduler" autowire="no" lazy-init="false"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory">
            <bean class="hasoffer.job.quartz.spring.SpringBeanJobFactory"/>
        </property>
        <property name="schedulerName" value="qrtz_scheduler"/>
        <!-- 发现添加dataSource之后无法正常执行调度任务，原因不知道。 -->
        <!--<property name="dataSource" ref="druidDataSource"/>-->
        <!--<property name="configLocation" value="classpath:quartz.properties"/>-->
        <!--applicationContextSchedulerContextKey： 是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中
            把spring上下 文以key/value的方式存放在了quartz的上下文中了， 可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文 -->
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>
        <property name="triggers">
            <list>
                <ref bean="priceOffNoticeTrigger"/>
                <ref bean="pushFailRePushTrigger"/>
                <!--<ref bean="priceOffDealUpdateTrigger"/>-->
                <!--<ref bean="priceOffGetDealTrigger"/>-->
                <ref bean="adminPushTrigger"/>
                <ref bean="statLogCountBeanTrigger"/>
                <ref bean="dealSiteFetchTrigger"/>
                <ref bean="stdSkuReviewFetchJobTrigger"/>
            </list>
        </property>

        <property name="globalJobListeners">
            <list>
                <ref bean="historyJobListener"/>
            </list>
        </property>
    </bean>

    <bean id="historyJobListener" class="hasoffer.job.quartz.HistoryJobListener"/>

    <!-- demo job -->
    <bean name="priceOffNoticeJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.push.PriceOffNoticeJobBean"/>
    </bean>

    <bean id="priceOffNoticeTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="startDelay" value="1000"/>
        <property name="repeatCount" value="0"/>
        <property name="repeatInterval" value="10000"/>
        <property name="jobDetail" ref="priceOffNoticeJob"/>
    </bean>

    <!-- 用户搜索一小时统计一次 -->
    <bean name="statLogCount" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.stat.StatLogCountJobBean"/>
    </bean>

    <bean id="statLogCountBeanTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="statLogCount"/>
        <property name="cronExpression" value="0 10 0/1 * * ?"/>
    </bean>

    <!--push重新发送的任务-->
    <bean name="pushFailRePushJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.push.RePushPriceOffNoticeJobBean"/>
    </bean>

    <bean id="pushFailRePushTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="pushFailRePushJob"/>
        <property name="cronExpression" value="0 30 11,14,22 * * ?"/>
    </bean>

    <!--price off create deal -->
    <bean name="priceOffGetDealJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.deal.CheckGetPriceOffDealJobBean"/>
    </bean>

    <bean id="priceOffGetDealTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="priceOffGetDealJob"/>
        <property name="cronExpression" value="0 0/10 * * * ?"/>
    </bean>

    <!--price off deal update-->
    <bean name="priceOffDealUpdateJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.deal.CheckPriceOffDealStatusJobBean"/>
    </bean>

    <bean id="priceOffDealUpdateTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="priceOffDealUpdateJob"/>
        <property name="cronExpression" value="0 0 0/1 * * ?"/>
    </bean>

    <!--admin push -->
    <bean name="adminPushJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.push.AdminPushJobBean"/>
    </bean>

    <bean id="adminPushTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="adminPushJob"/>
        <property name="cronExpression" value="0 0 1 1 1 ? 2066 "/>
    </bean>

    <!-- 从deal站抓取deal -->
    <bean name="dealSiteFetch" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.deal.DealSiteSendRquestJobBean"/>
    </bean>

    <bean id="dealSiteFetchTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="dealSiteFetch"/>
        <property name="cronExpression" value="0 33 0/1 * * ?"/>
    </bean>

    <!-- MOBILE91评论数据抓取-->
    <bean name="stdSkuReviewFetchJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="hasoffer.job.bean.fetch.PtmStdSkuFetchReviewJobBean"/>
    </bean>
    <bean id="stdSkuReviewFetchJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="stdSkuReviewFetchJob"/>
        <property name="cronExpression" value="0 00 20 ? * 1"/>
    </bean>

</beans>