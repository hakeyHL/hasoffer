<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	                           http://www.springframework.org/schema/tx
	                           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
							   http://www.springframework.org/schema/data/mongo
                               http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
	                           http://www.springframework.org/schema/context
	                           http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="hasoffer.data.redis"/>

    <!-- 引入配置文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:mongo.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!-- mongo 配置 -->
    <mongo:mongo id="mongo" host="${mongo.host}" port="${mongo.port}">
        <mongo:options
                connections-per-host="${mongo.connectionsPerHost}"
                threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
                connect-timeout="${mongo.connectTimeout}"
                max-wait-time="${mongo.maxWaitTime}"
                auto-connect-retry="${mongo.autoConnectRetry}"
                socket-keep-alive="${mongo.socketKeepAlive}"
                socket-timeout="${mongo.socketTimeout}"
                slave-ok="${mongo.slaveOk}"
                write-number="${mongo.writeNum}"
                write-timeout="${mongo.writeTimeout}"
                write-fsync="${mongo.writeFsync}"/>
    </mongo:mongo>
    <mongo:db-factory dbname="${mongo.database}" mongo-ref="mongo" id="mongoDbFactory"/>
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean>

    <!--<bean id="c3p0dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
    <!--destroy-method="close">-->
    <!--<property name="jdbcUrl" value="${jdbc.url}"></property>-->
    <!--<property name="driverClass" value="${jdbc.driverClassName}"></property>-->
    <!--<property name="user" value="${jdbc.username}"></property>-->
    <!--<property name="password" value="${jdbc.password}"></property>-->
    <!--<property name="maxPoolSize" value="80"></property>-->
    <!--<property name="minPoolSize" value="10"></property>-->
    <!--<property name="initialPoolSize" value="10"></property>-->
    <!--<property name="maxIdleTime" value="20"></property>-->
    <!--<property name="autoCommitOnClose" value="false"></property>-->
    <!--&lt;!&ndash;<property name="maxStatements" value="0"/>-->
    <!--<property name="checkoutTimeout" value="100"/>&ndash;&gt;-->
    <!--</bean>-->

    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="20"/>
        <property name="minIdle" value="20"/>
        <property name="maxActive" value="100"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    <!-- -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource"/>
        <property name="packagesToScan" value="hasoffer.core.persistence.po"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                hibernate.show_sql=false
                hibernate.hbm2ddl.auto=update
                hibernate.connection.autocommit=false
                hibernate.jdbc.batch_size=30
            </value>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <bean name="org.springframework.orm.hibernate4.HibernateTemplate"
          class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <context:component-scan base-package="hasoffer.core"/>

    <!-- 事务管理器配置, Hibernate单数据源事务 -->
    <bean id="defaultTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="defaultTransactionManager" proxy-target-class="true"/>

    <!-- 使用	annotation定义事务 | 使用 注解式事务 -->
    <!--<tx:advice id="txAdvice" transaction-manager="defaultTransactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="allEditMethod" expression="execution(* hasoffer.core.*.*.*(..))"></aop:pointcut>
        <aop:advisor pointcut-ref="allEditMethod" advice-ref="txAdvice"/>
    </aop:config>-->

    <!-- cache 配置 -->
    <import resource="spring-cache.xml"/>

</beans>